//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleAppTest.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Windows.Media.Color ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Windows.Media.Color Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Point", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class Point : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceGame", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServiceGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Login", ReplyAction="http://tempuri.org/IServiceGame/LoginResponse")]
        bool Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, System.Windows.Media.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Login", ReplyAction="http://tempuri.org/IServiceGame/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string login, System.Windows.Media.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/SendCoord", ReplyAction="http://tempuri.org/IServiceGame/SendCoordResponse")]
        void SendCoord(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/SendCoord", ReplyAction="http://tempuri.org/IServiceGame/SendCoordResponse")]
        System.Threading.Tasks.Task SendCoordAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/GetAllPlayers", ReplyAction="http://tempuri.org/IServiceGame/GetAllPlayersResponse")]
        ConsoleAppTest.ServiceReference1.Player[] GetAllPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/GetAllPlayers", ReplyAction="http://tempuri.org/IServiceGame/GetAllPlayersResponse")]
        System.Threading.Tasks.Task<ConsoleAppTest.ServiceReference1.Player[]> GetAllPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/GetPositionPlayer", ReplyAction="http://tempuri.org/IServiceGame/GetPositionPlayerResponse")]
        ConsoleAppTest.ServiceReference1.Position GetPositionPlayer(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/GetPositionPlayer", ReplyAction="http://tempuri.org/IServiceGame/GetPositionPlayerResponse")]
        System.Threading.Tasks.Task<ConsoleAppTest.ServiceReference1.Position> GetPositionPlayerAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Test", ReplyAction="http://tempuri.org/IServiceGame/TestResponse")]
        void Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Test", ReplyAction="http://tempuri.org/IServiceGame/TestResponse")]
        System.Threading.Tasks.Task TestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/GetPoint", ReplyAction="http://tempuri.org/IServiceGame/GetPointResponse")]
        ConsoleAppTest.ServiceReference1.Point GetPoint();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/GetPoint", ReplyAction="http://tempuri.org/IServiceGame/GetPointResponse")]
        System.Threading.Tasks.Task<ConsoleAppTest.ServiceReference1.Point> GetPointAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceGameChannel : ConsoleAppTest.ServiceReference1.IServiceGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGameClient : System.ServiceModel.ClientBase<ConsoleAppTest.ServiceReference1.IServiceGame>, ConsoleAppTest.ServiceReference1.IServiceGame {
        
        public ServiceGameClient() {
        }
        
        public ServiceGameClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceGameClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGameClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGameClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Login(string login1, System.Windows.Media.Color color) {
            return base.Channel.Login(login1, color);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string login, System.Windows.Media.Color color) {
            return base.Channel.LoginAsync(login, color);
        }
        
        public void SendCoord(double x, double y) {
            base.Channel.SendCoord(x, y);
        }
        
        public System.Threading.Tasks.Task SendCoordAsync(double x, double y) {
            return base.Channel.SendCoordAsync(x, y);
        }
        
        public ConsoleAppTest.ServiceReference1.Player[] GetAllPlayers() {
            return base.Channel.GetAllPlayers();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppTest.ServiceReference1.Player[]> GetAllPlayersAsync() {
            return base.Channel.GetAllPlayersAsync();
        }
        
        public ConsoleAppTest.ServiceReference1.Position GetPositionPlayer(string login) {
            return base.Channel.GetPositionPlayer(login);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppTest.ServiceReference1.Position> GetPositionPlayerAsync(string login) {
            return base.Channel.GetPositionPlayerAsync(login);
        }
        
        public void Test() {
            base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task TestAsync() {
            return base.Channel.TestAsync();
        }
        
        public ConsoleAppTest.ServiceReference1.Point GetPoint() {
            return base.Channel.GetPoint();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppTest.ServiceReference1.Point> GetPointAsync() {
            return base.Channel.GetPointAsync();
        }
    }
}
